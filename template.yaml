AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  github-actions-with-aws-sam

  Sample SAM Template for github-actions-with-aws-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  APIGateWay:
    Default: apiGateway_for_Lambda
    Type: String

  LambdaFileName:
    Description: Used to get file name from S3 bucket for Lambda Function
    Type: String

Resources:
  DynamoDBLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gnguyendo-cloud-resume-backend-template
        S3Key: !Ref LambdaFileName
      FunctionName: DynamoDBLambdaFN
      Handler: main/app.test_lambda
      Role: !GetAtt TempLambdaRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          DataBaseName: !Ref WebPageDynamoDBTable

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamoDBLambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPermission
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  - Effect: Allow
                    Action: "dynamodb:UpdateItem"
                    Resource: !GetAtt WebPageDynamoDBTable.Arn

  WebPageDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: Date
          AttributeType: S
      KeySchema:
        -
          AttributeName: Date
          KeyType: HASH

  RestAPIGateWay:
      Type: AWS::ApiGateway::RestApi
      Properties:
        EndpointConfiguration:
          Types:
            - EDGE
        Name: !Ref APIGateWay

  RestAPIGatewayProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPIGateWay
      ResourceId: !Ref RestAPIGatewayProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBLambdaFunction.Arn}/invocations

  RestAPIGatewayProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPIGateWay
      ParentId: !GetAtt
        - RestAPIGateWay
        - RootResourceId
      PathPart: '{proxy+}'

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: String
      RestApiId: !Ref RestAPIGateWay
      StageName: Prod

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DynamoDBLambdaFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIGateWay}/*